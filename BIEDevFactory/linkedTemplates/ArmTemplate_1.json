{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "BIEDevFactory"
		},
		"DBNSQLPNET_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DBNSQLPNET'",
			"defaultValue": "Integrated Security=True;Data Source=dbnsqlpnet.carhartt-nt.carhartt.com;Initial Catalog=CarharttDW;multisubnetfailover=True"
		},
		"DBNSQLPNET_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DBNSQLPNET'"
		},
		"DBNSQLPNET_RO_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DBNSQLPNET_RO'",
			"defaultValue": "Integrated Security=True;Data Source=dbnsqlpnet.carhartt-nt.carhartt.com;Initial Catalog=CarharttDW;multisubnetfailover=True;applicationintent=ReadOnly"
		},
		"DBNSQLPNET_RO_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'DBNSQLPNET_RO'"
		},
		"Db21_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Db21'"
		},
		"DBNSQLPNET_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "BIServiceAdmin@carharttdev.com"
		},
		"DBNSQLPNET_RO_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "BIServiceAdmin@carharttdev.com"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/4AM Process')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-07-07T03:57:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								1
							],
							"hours": [
								4
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EndOfDay')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-08-01T13:30:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								20
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HourlyRun')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-08-24T23:05:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								15
							],
							"hours": [
								4,
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HourlyWindow')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-11-01T12:00:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								50
							],
							"hours": [
								8,
								9,
								10,
								11,
								14,
								15,
								16,
								17
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MidnightRun')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-08-24T23:01:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								10
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunTasks1200')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-08-01T13:30:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								0,
								20,
								40
							],
							"hours": [
								5,
								6,
								7,
								8,
								9,
								10,
								11,
								12,
								13,
								14,
								15,
								16,
								17,
								18,
								19
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StatusCheck120')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-03-01T00:00:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								1
							],
							"hours": [
								9,
								11,
								13,
								15,
								17
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBNIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyProcessNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncRefresh",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasq01/models/Supply/refreshes",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SyncRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(last(json(activity('SyncRefresh').output.Response)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Microsoft Teams Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"teamsWebhookUrl": "https://carhartt.webhook.office.com/webhookb2/821a9519-9995-4e07-8f41-359204fb1c05@b4e848aa-20ef-4814-a34a-93fe53f3970f/IncomingWebhook/53212b4e54754a3097bd0b26030417bc/dfb007ca-9396-4a1c-9d58-b1b1499518b9",
								"ProcessName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@string(formatDateTime(variables('Response')[0].startTime))",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@string(formatDateTime(variables('Response')[0].endTime))",
									"type": "Expression"
								},
								"RefreshId": {
									"value": "@string(variables('Response')[0].refreshid)",
									"type": "Expression"
								},
								"Status": {
									"value": "@string(variables('Response')[0].status)",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"LastRefreshId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WIP_OrdersNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncRefresh",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Orders/refreshes",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SyncRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(json(activity('SyncRefresh').output.Response))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetStartRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Response')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Newest Refresh",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(formatDateTime(item().startTime),formatDateTime(variables('RefreshDate')))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SetRefresh",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastRefreshId",
													"value": {
														"value": "@item().refreshId",
														"type": "Expression"
													}
												}
											},
											{
												"name": "GreaterDate",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "SetRefresh",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RefreshDate",
													"value": {
														"value": "@item().startTime",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RefreshDate",
							"value": {
								"value": "@formatDateTime(string(array(last(json(activity('SyncRefresh').output.Response)))[0].startTime))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RefreshDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Orders/refreshes/',variables('LastRefreshId'))",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "Send Teams Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RefreshDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Microsoft Teams Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"teamsWebhookUrl": "https://carhartt.webhook.office.com/webhookb2/821a9519-9995-4e07-8f41-359204fb1c05@b4e848aa-20ef-4814-a34a-93fe53f3970f/IncomingWebhook/53212b4e54754a3097bd0b26030417bc/dfb007ca-9396-4a1c-9d58-b1b1499518b9",
								"ProcessName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@string(convertFromUtc(formatDateTime(activity('RefreshDetails').output.startTime),'Eastern Standard Time'))",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@string(convertFromUtc(formatDateTime(activity('RefreshDetails').output.endTime),'Eastern Standard Time'))",
									"type": "Expression"
								},
								"RefreshId": {
									"value": "@string(variables('LastRefreshId'))",
									"type": "Expression"
								},
								"Status": {
									"value": "@string(activity('RefreshDetails').output.status)",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetStartRefresh",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastRefreshId",
							"value": {
								"value": "@string(array(last(json(activity('SyncRefresh').output.Response)))[0].refreshId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"LastRefreshId": {
						"type": "String"
					},
					"RefreshDate": {
						"type": "String"
					},
					"CurrentDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WIP_SupplyNotification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncRefresh",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SyncRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(json(activity('SyncRefresh').output.Response))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SetStartRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Response')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Newest Refresh",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(formatDateTime(item().startTime),formatDateTime(variables('RefreshDate')))",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "SetRefresh",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "LastRefreshId",
													"value": {
														"value": "@item().refreshId",
														"type": "Expression"
													}
												}
											},
											{
												"name": "GreaterDate",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "SetRefresh",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "RefreshDate",
													"value": {
														"value": "@item().startTime",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "SetStartDate",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RefreshDate",
							"value": {
								"value": "@formatDateTime(string(array(last(json(activity('SyncRefresh').output.Response)))[0].startTime))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "RefreshDetails",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes/',variables('LastRefreshId'))",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "Send Teams Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "RefreshDetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Microsoft Teams Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"teamsWebhookUrl": "https://carhartt.webhook.office.com/webhookb2/821a9519-9995-4e07-8f41-359204fb1c05@b4e848aa-20ef-4814-a34a-93fe53f3970f/IncomingWebhook/53212b4e54754a3097bd0b26030417bc/dfb007ca-9396-4a1c-9d58-b1b1499518b9",
								"ProcessName": {
									"value": "@pipeline().Pipeline",
									"type": "Expression"
								},
								"PipelineID": {
									"value": "@pipeline().RunId",
									"type": "Expression"
								},
								"StartTime": {
									"value": "@string(convertFromUtc(formatDateTime(activity('RefreshDetails').output.startTime),'Eastern Standard Time'))",
									"type": "Expression"
								},
								"EndTime": {
									"value": "@string(convertFromUtc(formatDateTime(activity('RefreshDetails').output.endTime),'Eastern Standard Time'))",
									"type": "Expression"
								},
								"RefreshId": {
									"value": "@string(variables('LastRefreshId'))",
									"type": "Expression"
								},
								"Status": {
									"value": "@string(activity('RefreshDetails').output.status)",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "SetStartRefresh",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "SetStartDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LastRefreshId",
							"value": {
								"value": "@string(array(last(json(activity('SyncRefresh').output.Response)))[0].refreshId)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"LastRefreshId": {
						"type": "String"
					},
					"RefreshDate": {
						"type": "String"
					},
					"CurrentDate": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLQueue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BIP01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "Lorem"
					},
					"Table": {
						"type": "string",
						"defaultValue": "Ipsum"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBNSQLPNET')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('DBNSQLPNET_connectionString')]",
					"userName": "[parameters('DBNSQLPNET_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DBNSQLPNET_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DBNIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DBNIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DBNSQLPNET_RO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('DBNSQLPNET_RO_connectionString')]",
					"userName": "[parameters('DBNSQLPNET_RO_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('DBNSQLPNET_RO_password')]"
					}
				},
				"connectVia": {
					"referenceName": "DBNIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DBNIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Db21')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Db2",
				"typeProperties": {
					"connectionString": "[parameters('Db21_connectionString')]"
				},
				"connectVia": {
					"referenceName": "DBNIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/DBNIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AASSupplyRefresh_ManualRefresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RefreshSupply",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Contracts\"\n        },\n       {\n            \"table\": \"Current Inventory\"\n        },\n       {\n            \"table\": \"Available to Promise\"\n        },\n       {\n            \"table\": \"Purchase Orders\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ''Supply'' AS ''EventType''\n\t  ,''ADF_ManualRefresh'' AS ''EventName''\n\t  ,''R'' AS ''EventStatus''\n\t  ,GETDATE() AS ''CreateDateTime''\n\t  ,''',pipeline().parameters.Refresh,''' AS ''EventParameters''\n\t  ,''',string(variables('Response')[0].refreshid),''' AS ''RefreshId''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "AzureSharedEventQueue"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "AzureSharedEventQueue"
								}
							}
						]
					},
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RefreshSupply",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(first(json(activity('GetRefresh').output.Response)))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Refresh": {
						"type": "string",
						"defaultValue": "Inventory"
					}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					" LastRefreshId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AASSupplyRefresh_UpdateEvent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes/',string(activity('GetRefreshId').output.firstRow.RefreshId))",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT TOP 10 [EventId],[RefreshId] FROM [Controls].[AzureSharedEventQueue]\nWHERE [EventType] = 'Supply' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "UpdateQueue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
							"storedProcedureParameters": {
								"endTime": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"eventId": {
									"value": {
										"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"refreshId": {
									"value": {
										"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
										"type": "Expression"
									},
									"type": "String"
								},
								"startTime": {
									"value": {
										"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"status": {
									"value": "C",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIP01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasNightlyRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertCanvasNightly",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventType]\n\t  ,[ModelName]\n\t  ,[EventName]\n\t  ,[RefreshId]\n\t  ,(GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time') AS 'CreateDateTime'\nFROM \n(\nVALUES ('PBI Refresh','Canvas','Nightly_Begin',NULL) \n\t  ,('PBI Refresh','Canvas','Nightly_Dimensions','815210b8-e644-4b91-a326-115b1344d7e7') \n\t  ,('PBI Refresh','Canvas','Nightly_Facts','e5847484-b8b3-408d-ada6-b2d59c53b6ee') \n\t  ,('PBI Refresh','Canvas','Facts_Partitions','a4e27111-c905-4143-8ec7-d4540cc99856') \n\t--  ,('PBI Refresh','Canvas','Nightly_End',NULL) \n) AS CR (EventType,ModelName,EventName,RefreshId)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModelName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModelName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EventName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EventName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshId",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "CreateDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										},
										"sink": {
											"name": "CreateDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Nightly_Begin",
									"activities": [
										{
											"name": "SetNoRefresh_01",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_End",
									"activities": [
										{
											"name": "SetNoRefresh_02",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_Dimensions",
									"activities": [
										{
											"name": "Set_Tables",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Nightly_Facts",
									"activities": [
										{
											"name": "Set_Tables_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Nightly_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Nightly_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Nightly_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag02",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag02",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Full_Facts",
									"activities": [
										{
											"name": "Set_Tables_copy1_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Full_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Full_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Full_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag03",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag03",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "ConsumersETL",
									"activities": [
										{
											"name": "Set_NightlyFacts",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Attainment\"\n        },\n       {\n            \"table\": \"Production Plans Variance\"\n        },\n       {\n            \"table\": \"Raw Material Availability\"\n        },\n       {\n            \"table\": \"Manufacturing Lead Times\"\n        },\n       {\n            \"table\": \"Contracts\"\n        },\n       {\n            \"table\": \"Purchase Orders\"\n        },\n       {\n            \"table\": \"Current Inventory\"\n        },\n       {\n            \"table\": \"Item Plans UPC\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Facts_Partitions",
									"activities": [
										{
											"name": "Set_Tables_03",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Facts_Partition",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Facts_Partition').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Facts_Partition",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag04",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag04",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@activity('ReadRefresh').output.firstRow.EventId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"refreshId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "Invalid or Unknow EventName",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[ADFRefreshQueue]\nWHERE [ModelName] = 'Canvas'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('ProcessingConditional')),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "UpdateFlagQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "C",
												"type": "String"
											},
											"statusMessage": {
												"value": "Flag Event",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RefreshCanvasPBI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:00:25",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/d2b53e35-ee1f-4444-9aa8-fe0b91a98c7f/refreshes",
										"body": {
											"value": "@variables('RefreshParameters')",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "GetRefresh",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "RefreshCanvasPBI",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/d2b53e35-ee1f-4444-9aa8-fe0b91a98c7f/refreshes?$top=2",
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "FormatResponse",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Response",
										"value": {
											"value": "@array(first(activity('GetRefresh').output.value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FormatResponse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": {
													"value": "@string(variables('Response')[0].requestId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "R",
												"type": "String"
											},
											"statusMessage": {
												"value": "Just Started",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"ProcessingConditional": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/d2b53e35-ee1f-4444-9aa8-fe0b91a98c7f/refreshes/',string(activity('GetRefreshId').output.firstRow.RequestId))",
								"type": "Expression"
							},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT [EventId],[RequestId],[EventName],[PipelineRunID] FROM [Controls].[ADFRefreshQueue]\nWHERE [EventType] = 'PBI Refresh' AND [ModelName] = 'Canvas' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Completed",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"requestId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RequestId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": null,
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "Failed.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"url": "https://prod-41.eastus.logic.azure.com:443/workflows/08b4574d691b4ce08f3dc26df8b562ac/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=YjrzHlvX08-ifQA7FF0Wqd-vn5Q3z1sHFP2XiOX2aTg",
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RequestId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Canvas Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Canvas Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RequestId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "InProgress",
									"activities": [
										{
											"name": "UpdateCanvas_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.RequestID",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]"
			]
		}
	]
}