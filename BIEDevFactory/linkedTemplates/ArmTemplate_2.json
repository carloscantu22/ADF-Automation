{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "BIEDevFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Nightly_Begin",
									"activities": [
										{
											"name": "SetNoRefresh_01",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_End",
									"activities": [
										{
											"name": "SetNoRefresh_02",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										},
										{
											"name": "SendCompletionEmail",
											"type": "WebActivity",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"ModelName\" : \"','Canvas','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Nightly_Dimensions",
									"activities": [
										{
											"name": "Set_Tables",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Nightly_Facts",
									"activities": [
										{
											"name": "Set_Tables_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Nightly_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Nightly_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Nightly_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag02",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag02",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Full_Facts",
									"activities": [
										{
											"name": "Set_Tables_copy1_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Full_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Full_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Full_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag03",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag03",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "ConsumersETL",
									"activities": [
										{
											"name": "Set_NightlyFacts",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Attainment\"\n        },\n       {\n            \"table\": \"Production Plans Variance\"\n        },\n       {\n            \"table\": \"Raw Material Availability\"\n        },\n       {\n            \"table\": \"Manufacturing Lead Times\"\n        },\n       {\n            \"table\": \"Contracts\"\n        },\n       {\n            \"table\": \"Purchase Orders\"\n        },\n       {\n            \"table\": \"Current Inventory\"\n        },\n       {\n            \"table\": \"Item Plans UPC\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Facts_Partitions",
									"activities": [
										{
											"name": "Set_Tables_03",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Facts_Partition",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Facts_Partition').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Facts_Partition",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag04",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag04",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@activity('ReadRefresh').output.firstRow.EventId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"refreshId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "Invalid or Unknow EventName",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[ADFRefreshQueue]\nWHERE [ModelName] = 'Canvas'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('ProcessingConditional')),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "UpdateFlagQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "C",
												"type": "String"
											},
											"statusMessage": {
												"value": "Flag Event",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RefreshCanvasPBI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:00:25",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/d2584f83-3b80-414f-a5c5-2f3035983c85/datasets/5f7a2fe6-b9bd-4c35-91e2-ce420255bc6c/refreshes",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@variables('RefreshParameters')",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "GetRefresh",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "RefreshCanvasPBI",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/d2584f83-3b80-414f-a5c5-2f3035983c85/datasets/5f7a2fe6-b9bd-4c35-91e2-ce420255bc6c/refreshes?$top=2",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "FormatResponse",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Response",
										"value": {
											"value": "@array(first(activity('GetRefresh').output.value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FormatResponse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": {
													"value": "@string(variables('Response')[0].requestId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "R",
												"type": "String"
											},
											"statusMessage": {
												"value": "Just Started",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"ProcessingConditional": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/d2584f83-3b80-414f-a5c5-2f3035983c85/datasets/5f7a2fe6-b9bd-4c35-91e2-ce420255bc6c/refreshes/',string(activity('GetRefreshId').output.firstRow.RequestId))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT [EventId],[RequestId],[EventName],[PipelineRunID] FROM [Controls].[ADFRefreshQueue]\nWHERE [EventType] = 'PBI Refresh' AND [ModelName] = 'Canvas' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Completed",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"requestId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RequestId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": null,
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "Failed.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RequestId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Canvas Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Canvas Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RequestId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "InProgress",
									"activities": [
										{
											"name": "UpdateCanvas_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.RequestID",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ErrorLog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefreshInfo",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes/01b78707-59dd-4fae-ac65-98bf99c8b1bf",
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "SetMessage",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRefreshInfo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Messages",
							"value": {
								"value": "@replace(replace(join(activity('GetRefreshInfo').output.messages, ','), '{\"message\":', ''), '}', '')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert to Log",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "SetMessage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ',variables('RefreshId'),' AS ''EventId''\n\t  ,''',variables('Messages'),''' AS ''EventStatusMessage''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "AzureSharedEventQueue"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshId": {
						"type": "String"
					},
					"Messages": {
						"type": "String"
					}
				},
				"folder": {
					"name": "WIP"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterData_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "NightlyFull",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.powerbi.com/v1.0/myorg/groups/516449d1-03ba-45f4-9500-c94aee0d3912/datasets/b25fc398-0fc2-4a21-9633-c6f2cfaa18da/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 10,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Seasons\"\n        },\n        {\n            \"table\": \"Material Season\"\n        },\n        {\n            \"table\": \"Products\"\n        },\n        {\n            \"table\": \"Factory\"\n        },\n        {\n            \"table\": \"Plant Materials\"\n        },\n        {\n            \"table\": \"Materials\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "InsertQueue",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyFull",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT [EventType]\n\t  ,[ModelName]\n\t  ,[EventName]\n\t  ,[RefreshId]\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''CreateDateTime''\n\t  ,[EventStatus]\n\t  ,[ProcessEnd]\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''\nFROM \n(\nVALUES (''PBI Refresh'',''MasterData'',''Nightly_Begin'',NULL,''C'',''',activity('StartTime').output.firstRow.TimeNow,''') \n\t  ,(''PBI Refresh'',''MasterData'',''Nightly_Full'',''0a5fc4bf-c617-4553-9b40-ff2da2055b47'',''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''') \n\t  ,(''PBI Refresh'',''MasterData'',''Nightly_End'',NULL,''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''') \n) AS PR (EventType,ModelName,EventName,RefreshId,EventStatus,ProcessEnd)')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					},
					{
						"name": "SendCompletionEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "InsertQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\"ModelName\" : \"','Master Data','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MasterData"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersPBI_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SwitchEvent",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Nightly_Begin",
									"activities": [
										{
											"name": "SetNoRefresh_01",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_End",
									"activities": [
										{
											"name": "SetNoRefresh_02",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										},
										{
											"name": "SendCompletionEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "SetNoRefresh_02",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"ModelName\" : \"','Orders','\" , \"StartDateTime\" : \"',utcNow(),'\"}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Nightly_Dimensions",
									"activities": [
										{
											"name": "Set_Tables_04",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_04",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Orders''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_04",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Nightly_Facts",
									"activities": [
										{
											"name": "Set_Tables_05",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Nightly_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Nightly_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Nightly_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag05",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Orders''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag05",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Facts_Partitions",
									"activities": [
										{
											"name": "Set_Tables_08",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Facts_Partition",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 8,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Facts_Partition').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Facts_Partition",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag08",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([PRQ].[Tablename]) AS ''table'',TRIM([PRQ].[PartitionName]) AS ''partition''\n\tFROM [Controls].[ADFPartitionRefreshQueue] PRQ\n\tINNER JOIN [Controls].[ADFRefreshQueue] Q ON [Q].[EventParameters] = [PRQ].[RefreshId]\n\tWHERE [Q].[EventId] = ',activity('ReadRefresh').output.firstRow.EventId,'\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag08",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Hourly",
									"activities": [
										{
											"name": "Set_Tables_Hourly",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetForRefresh_Hourly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": \n    [\n\t{\n\t    \"table\": \"EMEA Orders\",\n\t    \"partition\":\"EMEA Orders Hourly\"\n\t},\n\t{\n\t    \"table\": \"Carhartt Retail Traffic\"\n\t},\n\t{\n\t    \"table\": \"Daily Goals\"\n\t},\n\t{\n\t    \"table\": \"Contracts\"\n\t},\n\t{\n\t    \"table\": \"RefreshDateTime\"\n\t},\n\t{\n\t    \"table\": \"Carhartt Retail Stores\"\n\t},\n\t{\n\t    \"table\": \"Carhartt Retail Transactions\",\n\t    \"partition\": \"Retail Transactions Hourly\"\n\t},\n\t{\n\t    \"table\": \"Reporting Notification Messages\"\n\t},\n\t{\n\t    \"table\": \"Delta Maintenance\"\n\t}\n]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetForRefresh_Hourly",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Retail_Nightly",
									"activities": [
										{
											"name": "Set_Tables_06",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_RetailNightly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_RetailNightly').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_RetailNightly",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag06",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Orders''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag06",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "EMEA_Nightly",
									"activities": [
										{
											"name": "Set_Tables_06_copy1",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_EMEANightly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_EMEANightly').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_EMEANightly",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag07",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Orders''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag07",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "RevenuePacing_Nightly",
									"activities": [
										{
											"name": "Set_Tables_06_copy2",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_RevenuePacingNightly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_RevenuePacingNightly').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_RevenuePacingNightly",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag09",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Orders''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag09",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Retail",
									"activities": [
										{
											"name": "Set_Tables_Retail",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetForRefresh_Retail",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": [\n    {\n        \"table\": \"Carhartt Retail Stores\"\n    },\n    {\n        \"table\": \"Carhartt Retail Transactions\",\n        \"partition\": \"Retail Transactions Hourly\"\n    },\n    {\n        \"table\": \"Carhartt Retail Traffic\"\n    }\n]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetForRefresh_Retail",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "ERROR: Unknown Event Name",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[ADFRefreshQueue]\nWHERE [ModelName] = 'Orders'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "ProcessCondition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SwitchEvent",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('ProcessingConditional')),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "UpdateFlagQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "C",
												"type": "String"
											},
											"statusMessage": {
												"value": "Flag Event",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RefreshSupplyPBI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:00:25",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1865273b-45f5-4639-b25f-5d8ca23358bc/refreshes",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@variables('RefreshParameters')",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "GetRefresh",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "RefreshSupplyPBI",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1865273b-45f5-4639-b25f-5d8ca23358bc/refreshes?$top=2",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "FormatResponse",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Response",
										"value": {
											"value": "@array(first(activity('GetRefresh').output.value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FormatResponse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": {
													"value": "@string(variables('Response')[0].requestId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "R",
												"type": "String"
											},
											"statusMessage": {
												"value": "Just Started",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"ProcessingConditional": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Orders_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersPBI_Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1865273b-45f5-4639-b25f-5d8ca23358bc/refreshes/',string(activity('GetRefreshId').output.firstRow.RequestId))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT [EventId],[RequestId],[EventName],[PipelineRunID],[ModelName] FROM [Controls].[ADFRefreshQueue]\nWHERE [EventType] = 'PBI Refresh' AND [ModelName] = 'Orders' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Completed",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"requestId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RequestId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "01:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 40,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": null,
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "ERROR: Process Failed",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RequestId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\", \"ModelName\" : \"',activity('GetRefreshId').output.firstRow.ModelName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Orders Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"PBI Orders Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RequestId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "InProgress",
									"activities": [
										{
											"name": "UpdateCanvas_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.RequestID",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Orders_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOrders_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "OrdersEvents",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "OrdersTabularFactPartitions",
									"activities": [
										{
											"name": "Set_Facts",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "PartitionRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 2,\n    \"Objects\": ',activity('PartitionRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "PartitionRefreshQueue",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([PRQ].[Tablename]) AS ''table'',TRIM([PRQ].[PartitionName]) AS ''partition''\n\tFROM [Controls].[SSASPartitionRefreshQueue] PRQ\n\tINNER JOIN [Controls].[AzureEventQueue] AEQ ON [AEQ].[RefreshId] = [PRQ].[RefreshId]\n\t\tWHERE [AEQ].[EventId] = ',activity('ReadRefresh').output.firstRow.EventId,'\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										}
									]
								},
								{
									"value": "OrdersRefreshReportingNotifications",
									"activities": [
										{
											"name": "Set_ReportingNotifications",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Reporting Notification Messages\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersRefreshDailyGoals",
									"activities": [
										{
											"name": "Set_DailyGoals",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Daily Goals\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyEMEA",
									"activities": [
										{
											"name": "Set_HourlyEMEA",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"EMEA Orders\",\n            \"partition\":\"EMEA Orders Hourly\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullRetail",
									"activities": [
										{
											"name": "Set_FullRetail",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Carhartt Retail Stores\"\n        },\n        {\n            \"table\": \"Carhartt Retail Transactions\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullDimensions",
									"activities": [
										{
											"name": "Set_FullDimensions",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Cancel Reasons\"\n        },\n        {\n            \"table\": \"Dates\"\n        },\n        {\n            \"table\": \"Carhartt Retail Date Periods\"\n        },\n        {\n            \"table\": \"Carhartt Retail Traffic\"\n        },\n        {\n            \"table\": \"Contracts\"\n        },\n        {\n            \"table\": \"Consumers\"\n        },\n        {\n            \"table\": \"Customers\"\n        },\n        {\n            \"table\": \"Daily Goals\"\n        },\n        {\n            \"table\": \"Delivery Block Categories\"\n        },\n        {\n            \"table\": \"Display Date\"\n        },\n        {\n            \"table\": \"Event Date\"\n        },\n        {\n            \"table\": \"Event Date Periods\"\n        },\n        {\n            \"table\": \"Expected Delivery Date\"\n        },\n        {\n            \"table\": \"Expected Ship Date\"\n        },\n        {\n            \"table\": \"Geography\"\n        },\n        {\n            \"table\": \"Inventory Stock Levels\"\n        },\n        {\n            \"table\": \"Item Plans Customers\"\n        },\n        {\n            \"table\": \"Item Plans\"\n        },\n        {\n            \"table\": \"Item Plans Monthly\"\n        },\n        {\n            \"table\": \"Material Availability Date\"\n        },\n        {\n            \"table\": \"Material Programs\"\n        },\n        {\n            \"table\": \"Materials\"\n        },\n        {\n            \"table\": \"Monthly Goals\"\n        },\n        {\n            \"table\": \"Order Date\"\n        },\n        {\n            \"table\": \"Original Expected Delivery Date\"\n        },\n        {\n            \"table\": \"Pick Ticket Start Ship Date\"\n        },\n        {\n            \"table\": \"Pick Ticket Status\"\n        },\n        {\n            \"table\": \"Pick Tickets\"\n        },\n        {\n            \"table\": \"ProductCategories\"\n        },\n        {\n            \"table\": \"Products\"\n        },\n        {\n            \"table\": \"RefreshDateTime\"\n        },\n        {\n            \"table\": \"Reporting Notification Messages\"\n        },\n        {\n            \"table\": \"Requested Delivery Date\"\n        },\n        {\n            \"table\": \"Required Ship Date\"\n        },\n        {\n            \"table\": \"Retail Discounts\"\n        },\n        {\n            \"table\": \"Retail Discounts Bridge\"\n        },\n       {\n            \"table\": \"Revenue Segments\"\n        },\n        {\n            \"table\": \"Sales Segments\"\n        },\n        {\n            \"table\": \"ShipVia Codes\"\n        },\n        {\n            \"table\": \"SLA Ship Date\"\n        },\n        {\n            \"table\": \"Stop Ship Date\"\n        },\n        {\n            \"table\": \"System Dates\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set_FullDimensions_copy1",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Cancel Reasons\"\n        },\n        {\n            \"table\": \"Dates\"\n        },\n        {\n            \"table\": \"Carhartt Retail Date Periods\"\n        },\n        {\n            \"table\": \"Carhartt Retail Traffic\"\n        },\n        {\n            \"table\": \"Contracts\"\n        },\n        {\n            \"table\": \"Consumers\"\n        },\n        {\n            \"table\": \"Customers\"\n        },\n        {\n            \"table\": \"Daily Goals\"\n        },\n        {\n            \"table\": \"Delivery Block Categories\"\n        },\n        {\n            \"table\": \"Display Date\"\n        },\n        {\n            \"table\": \"Event Date\"\n        },\n        {\n            \"table\": \"Event Date Periods\"\n        },\n        {\n            \"table\": \"Expected Delivery Date\"\n        },\n        {\n            \"table\": \"Expected Ship Date\"\n        },\n        {\n            \"table\": \"Geography\"\n        },\n        {\n            \"table\": \"Inventory Stock Levels\"\n        },\n        {\n            \"table\": \"Item Plans Customers\"\n        },\n        {\n            \"table\": \"Item Plans\"\n        },\n        {\n            \"table\": \"Item Plans Monthly\"\n        },\n        {\n            \"table\": \"Material Availability Date\"\n        },\n        {\n            \"table\": \"Material Programs\"\n        },\n        {\n            \"table\": \"Materials\"\n        },\n        {\n            \"table\": \"Monthly Goals\"\n        },\n        {\n            \"table\": \"Order Date\"\n        },\n        {\n            \"table\": \"Original Expected Delivery Date\"\n        },\n        {\n            \"table\": \"Pick Ticket Start Ship Date\"\n        },\n        {\n            \"table\": \"Pick Ticket Status\"\n        },\n        {\n            \"table\": \"Pick Tickets\"\n        },\n        {\n            \"table\": \"ProductCategories\"\n        },\n        {\n            \"table\": \"Products\"\n        },\n        {\n            \"table\": \"RefreshDateTime\"\n        },\n        {\n            \"table\": \"Reporting Notification Messages\"\n        },\n        {\n            \"table\": \"Requested Delivery Date\"\n        },\n        {\n            \"table\": \"Required Ship Date\"\n        },\n        {\n            \"table\": \"Retail Discounts\"\n        },\n        {\n            \"table\": \"Retail Discounts Bridge\"\n        },\n       {\n            \"table\": \"Revenue Segments\"\n        },\n        {\n            \"table\": \"Sales Segments\"\n        },\n        {\n            \"table\": \"ShipVia Codes\"\n        },\n        {\n            \"table\": \"SLA Ship Date\"\n        },\n        {\n            \"table\": \"Stop Ship Date\"\n        },\n        {\n            \"table\": \"System Dates\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyRevenuePacing",
									"activities": [
										{
											"name": "Set_HourlyRevenuePacing",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Reporting Notification Messages\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "FactPartitionsStart",
									"activities": [
										{
											"name": "Set_GenericFPS",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullEnd",
									"activities": [
										{
											"name": "Set_GenericFE",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyEnd",
									"activities": [
										{
											"name": "Set_GenericHE",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullRevenuePacing",
									"activities": [
										{
											"name": "Set_FullRevenuePacing",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Revenue Pacing\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullEMEA",
									"activities": [
										{
											"name": "Set_FullEMEA",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"EMEA Orders\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyDimensions",
									"activities": [
										{
											"name": "Set_HourlyDimensions",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Carhartt Retail Traffic\"\n        },\n        {\n            \"table\": \"Daily Goals\"\n        },\n        {\n            \"table\": \"Contracts\"\n        },\n        {\n            \"table\": \"RefreshDateTime\"\n        }\n\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyRetailTransactions",
									"activities": [
										{
											"name": "Set_HourlyRetailTransactions",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Carhartt Retail Stores\"\n        },\n        {\n            \"table\": \"Carhartt Retail Transactions\",\n            \"partition\": \"Retail Transactions Hourly\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersRefreshMonthlyGoals",
									"activities": [
										{
											"name": "Set_MonthlyGoals",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"AtOnceBudgetNeed\"\n        },\n        {\n            \"table\": \"Monthly Goals\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyRetailTraffic",
									"activities": [
										{
											"name": "Set_HourlyRetailTraffic",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Carhartt Retail Traffic\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullStart",
									"activities": [
										{
											"name": "Set_GenericFS",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyStart",
									"activities": [
										{
											"name": "Set_GenericHS",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "FactPartitionsEnd",
									"activities": [
										{
											"name": "Set_GenericFPE",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularHourlyRetail",
									"activities": [
										{
											"name": "Set_HourlyRetail",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Reporting Notification Messages\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "OrdersTabularFullFacts",
									"activities": [
										{
											"name": "Set_GenericFF",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Date Bridge\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"refreshId": {
												"value": {
													"value": "@string(activity('ReadRefresh').output.firstRow.RefreshId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": null,
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[RefreshId],[EventName] FROM [Controls].[AzureEventQueue]\n\tWHERE [EventType] = 'SSAS Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "RefreshOrders",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "OrdersEvents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Orders/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@variables('RefreshParameters')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RefreshOrders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Orders/refreshes",
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(first(json(activity('GetRefresh').output.Response)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateQueue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Controls].[ADFOrdersQueueUpdate]",
							"storedProcedureParameters": {
								"endTime": {
									"value": null,
									"type": "DateTime"
								},
								"eventId": {
									"value": {
										"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"refreshId": {
									"value": {
										"value": "@string(activity('ReadRefresh').output.firstRow.RefreshId)",
										"type": "Expression"
									},
									"type": "String"
								},
								"startTime": {
									"value": {
										"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"status": {
									"value": "R",
									"type": "String"
								},
								"statusMessage": {
									"value": {
										"value": "@string(variables('Response')[0].RefreshId)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIP01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Orders"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOrders_UpdateQueue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Orders/refreshes/',string(activity('GetRefreshId').output.firstRow.EventStatusMessage))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventStatusMessage],[RefreshId],[EventName] FROM [Controls].[AzureEventQueue]\n\tWHERE [EventType] = 'SSAS Refresh'\n\t  AND [EventStatus] = 'R'\nORDER BY [EventId] ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "succeeded",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFOrdersQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.EventStatusMessage)",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFOrdersQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFOrdersQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RefreshId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Orders Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Orders Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventStatusMessage}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "inProgress",
									"activities": [
										{
											"name": "UpdateQueue_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFOrdersQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.EventStatusMessage)",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Orders"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_Error')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "StatusCheck",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[AzureSharedEventQueue]\n\tWHERE [EventType] = 'Supply' AND [EventStatus] NOT IN ('R','F','C') \n)\nTHEN 1\nELSE 0 END AS 'InvalidStatus'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "StatusCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('StatusCheck').output.firstRow.InvalidStatus,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ErrorNotification",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Teams Notification",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"messageCard": {
												"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Supply Queue Error\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Supply Queue Error\",\n            \"facts\": [\n                {\n                    \"name\": \"Error:\",\n                    \"value\": \"Invalid Event Status\"\n                },\n                {\n                    \"name\": \"Queue:\",\n                    \"value\": \"Supply\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Supply"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Supply_Inventory",
									"activities": [
										{
											"name": "Set_Inventory",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Available to Promise\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_Hourly",
									"activities": [
										{
											"name": "Set_Hourly",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Contracts\"\n        },\n       {\n            \"table\": \"Open Orders\"\n        },\n       {\n            \"table\": \"Current Inventory\"\n        },\n       {\n            \"table\": \"Purchase Orders\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_NightlyDimensions",
									"activities": [
										{
											"name": "Set_NightlyDimensions",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Country Codes\"\n        },\n       {\n            \"table\": \"Customers\"\n        },\n       {\n            \"table\": \"Item Plans Customers\"\n        },\n       {\n            \"table\": \"Date Periods\"\n        },\n       {\n            \"table\": \"Factory\"\n        },\n       {\n            \"table\": \"Dates\"\n        },\n       {\n            \"table\": \"Materials\"\n        },\n       {\n            \"table\": \"Production Plans Plan Source\"\n        },\n       {\n            \"table\": \"Products\"\n        },\n       {\n            \"table\": \"Raw Products\"\n        },\n       {\n            \"table\": \"Refresh Date Time\"\n        },\n       {\n            \"table\": \"Inventory Plans End Month\"\n        },\n       {\n            \"table\": \"Inventory Plans Start Month\"\n        },\n       {\n            \"table\": \"Reporting Notification Messages\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_Begin",
									"activities": [
										{
											"name": "Set_Generic1",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Factory\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_End",
									"activities": [
										{
											"name": "SendCompletionEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Set_Generic2",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"ModelName\" : \"','Supply','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set_Generic2",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Factory\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_NightlyFacts",
									"activities": [
										{
											"name": "Set_NightlyFacts",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Attainment\"\n        },\n       {\n            \"table\": \"Production Plans Variance\"\n        },\n       {\n            \"table\": \"Raw Material Availability\"\n        },\n       {\n            \"table\": \"Manufacturing Lead Times\"\n        },\n       {\n            \"table\": \"Contracts\"\n        },\n       {\n            \"table\": \"Purchase Orders\"\n        },\n       {\n            \"table\": \"Current Inventory\"\n        },\n       {\n            \"table\": \"Item Plans UPC\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_DemandNightly",
									"activities": [
										{
											"name": "Set_Demand",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        },\n        {\n            \"table\": \"Inventory Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_ProductionPlans",
									"activities": [
										{
											"name": "Supply_ProductionPlans",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"Draft Partition\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_InventoryPlans",
									"activities": [
										{
											"name": "Supply_InventoryPlans",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Inventory Plans\",\n            \"partition\": \"Draft Partition\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_MSODraftNotification",
									"activities": [
										{
											"name": "SendDraftEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Set_Generic2_copy1",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-16.northcentralus.logic.azure.com:443/workflows/2fe1f2ecb460441ab439d52dc4376fa9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=jImsHlpPczPE6nGyWS0zsMwolhW7x3qwnHdBaoIJYY0",
												"method": "POST",
												"headers": {},
												"body": {
													"value": "@concat('{','}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set_Generic2_copy1",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Factory\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_MSODraftApprovalNotification",
									"activities": [
										{
											"name": "SendApprovalEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Set_Generic3",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-29.northcentralus.logic.azure.com:443/workflows/7c6e0b550366480181ceebc02c0ce319/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=QOEpbIKJ72zB2U9vZYdc0T-yasXVGGECgEpCp-ebKSg",
												"method": "POST",
												"headers": {},
												"body": {
													"value": "@concat('{','}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set_Generic3",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Factory\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_ProductionPlansNightly",
									"activities": [
										{
											"name": "Set_ProductionPlans",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Supply_InventoryPlansNightly",
									"activities": [
										{
											"name": "Set_InventoryPlans",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Inventory Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@activity('ReadRefresh').output.firstRow.EventId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"refreshId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "Invalid or Unknow EventName",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[AzureSharedEventQueue]\nWHERE EventType = 'Supply' AND [EventStatus] IS NULL\nORDER BY EventId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "RefreshSupply",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Switch1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@variables('RefreshParameters')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "RefreshSupply",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes",
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "FormatResponse",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Response",
							"value": {
								"value": "@array(first(json(activity('GetRefresh').output.Response)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UpdateQueue",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FormatResponse",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
							"storedProcedureParameters": {
								"endTime": {
									"value": null,
									"type": "DateTime"
								},
								"eventId": {
									"value": {
										"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"refreshId": {
									"value": {
										"value": "@string(variables('Response')[0].RefreshId)",
										"type": "Expression"
									},
									"type": "String"
								},
								"startTime": {
									"value": {
										"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"status": {
									"value": "R",
									"type": "String"
								},
								"statusMessage": {
									"value": null,
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "BIP01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Supply"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_UpdateQueue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes/',string(activity('GetRefreshId').output.firstRow.RefreshId))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[RefreshId],[EventName] FROM [Controls].[AzureSharedEventQueue]\nWHERE [EventType] = 'Supply' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "succeeded",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "Exception Alerted.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RefreshId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Supply Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Supply Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RefreshId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "inProgress",
									"activities": [
										{
											"name": "UpdateQueue_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Supply"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductivityModel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[WMS].[UpdateProductivityModelInputs]",
							"storedProcedureParameters": {
								"ResetConfiguration": {
									"value": "1",
									"type": "Byte"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "DBNSQLP01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "OXG-Sandbox"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyPBI_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Nightly_Begin",
									"activities": [
										{
											"name": "SetNoRefresh_01",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_End",
									"activities": [
										{
											"name": "SetNoRefresh_02",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										},
										{
											"name": "SendCompletionEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "SetNoRefresh_02",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"ModelName\" : \"','Supply','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Nightly_Dimensions",
									"activities": [
										{
											"name": "Set_Tables_04",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_04",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Supply''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_04",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Nightly_Facts",
									"activities": [
										{
											"name": "Set_Tables_05",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Nightly_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Nightly_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Nightly_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag05",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Supply''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag05",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "ProductionPlans_Draft",
									"activities": [
										{
											"name": "Set_Tables_06",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag06",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 1,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"Draft Partition\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag06",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "InventoryPlans_Nightly",
									"activities": [
										{
											"name": "Set_Tables_07",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag07",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Inventory Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag07",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Facts_Partitions",
									"activities": [
										{
											"name": "Set_Tables_08",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Facts_Partition",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Facts_Partition').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Facts_Partition",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag08",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Canvas''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag08",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "ProductionPlans_Nightly",
									"activities": [
										{
											"name": "Set_Tables_09",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag09",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"Nightly Partition ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'dddd'),'\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag09",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "ATP_Facts",
									"activities": [
										{
											"name": "Set_Tables_10",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag10",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 4,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Available to Promise\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag10",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "MSODraftNotification",
									"activities": [
										{
											"name": "SendDraftEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "SetNoRefresh_11",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-16.northcentralus.logic.azure.com:443/workflows/2fe1f2ecb460441ab439d52dc4376fa9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=jImsHlpPczPE6nGyWS0zsMwolhW7x3qwnHdBaoIJYY0",
												"method": "POST",
												"headers": {},
												"body": {
													"value": "@concat('{','}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetNoRefresh_11",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Hourly",
									"activities": [
										{
											"name": "Set_Tables_Hourly",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue_Hourly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue_Hourly').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue_Hourly",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_Hourly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Supply''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_Hourly",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "InventoryPlans_Draft",
									"activities": [
										{
											"name": "Set_Tables_InvPlansDraft",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag_InvPlansDraft",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 1,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Inventory Plans\",\n            \"partition\": \"Draft Partition\"\n        }\n    ]\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag_InvPlansDraft",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "ERROR: Unknown Event Name",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[ADFRefreshQueue]\nWHERE [ModelName] = 'Supply'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('ProcessingConditional')),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "UpdateFlagQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "C",
												"type": "String"
											},
											"statusMessage": {
												"value": "Flag Event",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RefreshSupplyPBI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:00:25",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/ab4a9a2a-8b91-42ae-95aa-4d027c90c86f/refreshes",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@variables('RefreshParameters')",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "GetRefresh",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "RefreshSupplyPBI",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/ab4a9a2a-8b91-42ae-95aa-4d027c90c86f/refreshes?$top=2",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "FormatResponse",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Response",
										"value": {
											"value": "@array(first(activity('GetRefresh').output.value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FormatResponse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": {
													"value": "@string(variables('Response')[0].requestId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "R",
												"type": "String"
											},
											"statusMessage": {
												"value": "Just Started",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"ProcessingConditional": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Supply_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyPBI_Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/ab4a9a2a-8b91-42ae-95aa-4d027c90c86f/refreshes/',string(activity('GetRefreshId').output.firstRow.RequestId))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT [EventId],[RequestId],[EventName],[PipelineRunID],[ModelName] FROM [Controls].[ADFRefreshQueue]\nWHERE [EventType] = 'PBI Refresh' AND [ModelName] = 'Supply' AND [EventStatus] = 'R'\nORDER BY EventId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Completed",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"requestId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RequestId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "01:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 40,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": null,
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "ERROR: Process Failed",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RequestId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\", \"ModelName\" : \"',activity('GetRefreshId').output.firstRow.ModelName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Supply Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"PBI Supply Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RequestId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "InProgress",
									"activities": [
										{
											"name": "UpdateCanvas_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.RequestID",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Supply_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WarehouseNightlyRun')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InsertWarehouseNightly",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventType]\n\t  ,[ModelName]\n\t  ,[EventName]\n\t  ,[RefreshId]\n\t  ,(GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time') AS 'CreateDateTime'\nFROM \n(\nVALUES ('PBI Refresh','Warehouse','Nightly_Begin',NULL) \n\t  ,('PBI Refresh','Warehouse','Nightly_Dimensions','e91a7779-d666-4c42-8948-37335a93cc69') \n\t  ,('PBI Refresh','Warehouse','Nightly_Facts','1dea953e-721c-4976-a44b-8383e8cf00fe') \n\t  ,('PBI Refresh','Warehouse','Facts_Partitions','4eb9fcad-36c9-4d35-a783-27d3ae25a098') \n\t  ,('PBI Refresh','Warehouse','Nightly_End',NULL) \n) AS CR (EventType,ModelName,EventName,RefreshId)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EventType",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ModelName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "ModelName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "EventName",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "EventName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "RefreshId",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "RefreshId",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"name": "CreateDateTime",
											"type": "DateTimeOffset",
											"physicalType": "datetimeoffset"
										},
										"sink": {
											"name": "CreateDateTime",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Warehouse_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse_Update')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1e04c36c-aa71-43a4-bd7b-843e24169196/refreshes/',string(activity('GetRefreshId').output.firstRow.RequestId))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT [EventId],[RequestId],[EventName],[PipelineRunID],[ModelName] FROM [Controls].[ADFRefreshQueue]\nWHERE [EventType] = 'PBI Refresh' AND [ModelName] = 'Warehouse' AND [EventStatus] = 'R'\nORDER BY EventId",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Completed",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"requestId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RequestId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "Failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "01:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 40,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": null,
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "ERROR: Process Failed",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-',''),'''','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',activity('GetRefreshId').output.firstRow.EventId,' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueueExceptions"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',trim(activity('GetRefreshId').output.firstRow.RequestId),'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\", \"ModelName\" : \"',activity('GetRefreshId').output.firstRow.ModelName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Warehouse Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Warehouse Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RequestId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "InProgress",
									"activities": [
										{
											"name": "UpdateCanvas_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.PipelineRunID",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": {
															"value": "@activity('GetRefreshId').output.firstRow.RequestID",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Warehouse_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarharttDW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DBNSQLP01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PNETSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DBNSQLPNET",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WMIPROD')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Db21",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "Veniam"
					},
					"Table": {
						"type": "string",
						"defaultValue": "Minim"
					}
				},
				"annotations": [],
				"type": "Db2Table",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunningValidation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Canvas'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] = 'R'\n)\nTHEN 1\nELSE 0 END AS 'Running'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RunningValidation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RunningValidation').output.firstRow.Running,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ProcessCanvas_RefreshPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CanvasPBI_Refresh",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ProcessSCanvas_UpdateQueuePBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CanvasPBI_Update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CanvasPBI_Refresh')]",
				"[concat(variables('factoryId'), '/pipelines/CanvasPBI_Update')]"
			]
		}
	]
}