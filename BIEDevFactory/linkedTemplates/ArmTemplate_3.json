{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "BIEDevFactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/OrderExclusionPNET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pupulate Table",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_eCommAging].[OrderExclusion]"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ActualDate",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "ActualDate",
											"type": "DateTime",
											"physicalType": "DateTime"
										}
									},
									{
										"source": {
											"name": "OrderNumber",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "OrderNumber",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "OrderLineNumber",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "OrderLineNumber",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_eCommAging",
									"Table": "OrderExclusionQuery"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_eCommAging",
									"Table": "OrderExclusion"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersPBI_Running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunningValidation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Orders'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] = 'R'\n)\nTHEN 1\nELSE 0 END AS 'Running'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RunningValidation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RunningValidation').output.firstRow.Running,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ProcessOrders_RefreshPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "OrdersPBI_Refresh",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ProcessOrders_UpdatePBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "OrdersPBI_Update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Orders_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOrders_Running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunningValidation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[AzureEventQueue]\n\tWHERE [EventType] = 'SSAS Refresh'\n\t  AND [EventStatus] = 'R'\n)\nTHEN 1\nELSE 0 END AS 'Running'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RunningValidation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RunningValidation').output.firstRow.Running,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ProcessOrders_Refresh",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessOrders_Refresh",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ProcessOrders_UpdateQueue",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessOrders_UpdateQueue",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Orders"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_Running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunningValidation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[AzureSharedEventQueue]\n\tWHERE [EventType] = 'Supply' AND [EventStatus] = 'R'\n)\nTHEN 1\nELSE 0 END AS 'Running'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RunningValidation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RunningValidation').output.firstRow.Running,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ProcessSupply_Refresh",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessSupply_Refresh",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ProcessSupply_UpdateQueue",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessSupply_UpdateQueue",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Supply"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RetailFlashEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckForHourly",
						"description": "Query to return TRUE if the first hourly in Orders is Complete.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT [SL].[SupportLogNumber],[SL].[PackageStatus],[SL].[EndOfProcess],[EQ].*\n\tFROM [Controls].[SupportLogs] SL\n\tINNER JOIN [Dimensions].[Days] DT ON [DT].[ActualDate] = CAST([EndOfProcess] AS date)\n\tINNER JOIN [AZUREDB].[DB01].[Controls].[ADFRefreshQueue] EQ ON [EQ].[CreateDateTime] > [SL].[EndOfProcess]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND [EQ].[EventName] = 'Hourly'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND [EQ].[ModelName] = 'Orders'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   AND [EQ].[EventStatus] = 'C'\n\tWHERE [SL].[ChildPackageName] = 'ImportShopperTrakTraffic'\n\t  AND [SL].[PackageStatus] = 'C'\n\t  AND [DT].[CurrentDayOffset] = 0\n)\nTHEN 1\nELSE 0 END AS 'HourlyRun'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PNET_ReadOnly",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Dapibus",
									"Table": "Faucibus"
								}
							}
						}
					},
					{
						"name": "SendD2CEmail",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckForHourly",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CheckForShopperTrak",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "D2CEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(int(activity('D2CEmail').output.firstRow.D2CEmail),0),and(equals(int(activity('CheckForHourly').output.firstRow.HourlyRun),1),equals(int(activity('CheckForShopperTrak').output.firstRow.ShopperTrakTraffic),1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send D2C Notification",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-74.eastus.logic.azure.com:443/workflows/d0fe5215184f44a19ac8c8ed5292ca88/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=UXOcGWvfeZYR2ia3rzPQkXEmTRAJxv_qTyNQjslGUeQ",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"SendEmail": "Yes",
											"EmailType": "D2CEmail"
										}
									}
								},
								{
									"name": "InsertQueue",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Send D2C Notification",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ''PBI Refresh'' AS ''EventType''\n\t  ,''Orders'' AS ''ModelName''\n\t  ,''D2CDashboardsReady'' AS ''EventName''\n\t  ,''C'' AS ''EventStatus''\n\t  ,NULL AS ''RefreshId''\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''CreateDateTime''\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''ProcessStart''\n\t  ,''',convertFromUtc(utcnow(),'Eastern Standard Time'),''' AS ''ProcessEnd''\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSQLQueue",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "Lorem",
												"Table": "Ipsum"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSQLQueue",
											"type": "DatasetReference",
											"parameters": {
												"Schema": "Controls",
												"Table": "ADFRefreshQueue"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "CheckForShopperTrak",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT [SL].[SupportLogNumber],[SL].[PackageStatus],[SL].[EndOfProcess]\n\tFROM [Controls].[SupportLogs] SL\n\tINNER JOIN [Dimensions].[Days] DT ON [DT].[ActualDate] = CAST([EndOfProcess] AS date)\n\tWHERE [SL].[ChildPackageName] = 'ImportShopperTrakTraffic'\n\t  AND [SL].[PackageStatus] = 'C'\n\t  AND [DT].[CurrentDayOffset] = 0)\nTHEN 1\nELSE 0 END AS 'ShopperTrakTraffic'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PNET_ReadOnly",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Dapibus",
									"Table": "Faucibus"
								}
							}
						}
					},
					{
						"name": "D2CEmail",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE EventName = 'D2CDashboardsReady'\n\t  AND [ModelName] = 'Orders'\n\t  AND [EventStatus] IN ('C')\n\t  AND CAST([CreateDateTime] AS date) = CAST(GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' AS date)\n)\nTHEN 1\nELSE 0 END AS 'D2CEmail'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "SendHourlyAlert",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SendD2CEmail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(int(activity('D2CEmail').output.firstRow.D2CEmail),0),and(equals(int(activity('CheckForHourly').output.firstRow.HourlyRun),0),equals(int(activity('CheckForShopperTrak').output.firstRow.ShopperTrakTraffic),1)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Hourly Alert",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-74.eastus.logic.azure.com:443/workflows/d0fe5215184f44a19ac8c8ed5292ca88/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=UXOcGWvfeZYR2ia3rzPQkXEmTRAJxv_qTyNQjslGUeQ",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"SendEmail": "No",
											"EmailType": "OrdersHourly"
										}
									}
								}
							]
						}
					},
					{
						"name": "SendShopperTrakAlert",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "SendHourlyAlert",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(equals(int(activity('D2CEmail').output.firstRow.D2CEmail),0),and(equals(int(activity('CheckForHourly').output.firstRow.HourlyRun),0),equals(int(activity('CheckForShopperTrak').output.firstRow.ShopperTrakTraffic),0)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Send Shopper Trac Alert",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-74.eastus.logic.azure.com:443/workflows/d0fe5215184f44a19ac8c8ed5292ca88/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=UXOcGWvfeZYR2ia3rzPQkXEmTRAJxv_qTyNQjslGUeQ",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"SendEmail": "No",
											"EmailType": "ShopperTrak"
										}
									}
								}
							]
						}
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "General"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RunningNodePNET')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ServerName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT @@SERVERNAME AS 'ServerName'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PNET_ReadOnly",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Dapibus",
									"Table": "Faucibus"
								}
							}
						}
					},
					{
						"name": "Check Running",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ServerName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ServerName').output.firstRow.ServerName,'EU2PRDBISQL02')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "TelegramNotifications",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "TelegramNotifications",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Message": {
												"value": "@concat('Node Running: ',activity('ServerName').output.firstRow.ServerName)",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "General"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SLACalculation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopySLACalculation",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Warehouse2].[SLACalculation]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "PickTicketControlNumber",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "PickTicketControlNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SLAOrderProcessingID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SLAOrderProcessingID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SLAOrderQualifier",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "SLAOrderQualifier",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ExcludeTicket",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ExcludeTicket",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IsInternational",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "IsInternational",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "IsIrregular",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "IsIrregular",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "FirstQuality",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "FirstQuality",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ProductEnhancement",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ProductEnhancement",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "ShipVia",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "ShipVia",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ReadyToShipDateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ReadyToShipDateKey",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "SLAProcessingCategory",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "SLAProcessingCategory",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IsExpedited",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "IsExpedited",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "IsParcel",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "IsParcel",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "IsEmployeeSale",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IsEmployeeSale",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SLATargetDateKey",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "SLATargetDateKey",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Warehouse2",
									"Table": "ADF_SLACalculation"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Warehouse2",
									"Table": "SLACalculation"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Warehouse_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyPBI_Running')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RunningValidation",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "  SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Supply'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] = 'R'\n)\nTHEN 1\nELSE 0 END AS 'Running'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "RunningValidation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('RunningValidation').output.firstRow.Running,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ProcessSupply_RefreshPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SupplyPBI_Refresh",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ProcessSupply_UpdateQueuePBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SupplyPBI_Update",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Supply_PBI"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WMi_Plants_Full')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WMi_Styles",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT STSEA\n\t  ,STSTYL\n\t  ,STCOLR\n\t  ,STSDIM\n\t  ,STSZCD\n\t  ,STSZPO\n\t  ,STSZDS\n\t  ,STSTYD\n\t  ,STSTAT\n\t  ,STDCR\n\t  ,STTCR\n\t  ,STDLM\n\t  ,STTLM\nFROM WM350PLTBD.STSTYL00"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[STSTYL00]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "STSTYL00"
								}
							}
						]
					},
					{
						"name": "WMi_Case Inventory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT IDCASN\n\t  ,IDSEA\n\t  ,IDSTYL\n\t  ,IDCOLR\n\t  ,IDSDIM\n\t  ,IDSZCD\n\t  ,IDSZPO\n\t  ,IDINVT\n\t  ,IDBCHN\n\t  ,IDSZDS\n\t  ,IDQTY\n\t  ,IDSQTY\n\t  ,IDWKON\n\t  ,IDSHMT\n\t  ,IDPON\n\t  ,IDTRLN\n\t  ,IDSTAT\n\t  ,IDWHSE\n\t  ,IDAREA\n\t  ,IDZONE\n\t  ,IDAISL\n\t  ,IDBAY\n\t  ,IDLEVL\n\t  ,IDPOSN\n\t  ,IDPAID\n\t  ,IDPXR3\n\t  ,IDDCR\n\t  ,IDTCR\n\t  ,IDUSER\nFROM WM350PLTBD.IDCASE00\nWHERE IDDCR >= 20220101"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[IDCASE00]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "IDCASE00"
								}
							}
						]
					},
					{
						"name": "WMi_Country Origin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT PRORDER\n\t  ,PRADJORG\n\t  ,PRPLTCTY\n\t  ,PRDTCR\n\t  ,PRTMCR\nFROM WM350PLTCD.PRPROD00\nWHERE PRDTCR >= 20220101"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[PRPROD00]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "PRPROD00"
								}
							}
						]
					},
					{
						"name": "WMi_Work Order",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT DDWHSE\n\t  ,DDWKON\n\t  ,DDSEA\n\t  ,DDSTYL\n\t  ,DDCOLR\n\t  ,DDSDIM\n\t  ,DDSZCD\n\t  ,DDSZPO\n\t  ,DDSZDS\n\t  ,DDINVT\n\t  ,DDBORQ\n\t  ,DDDCR\nFROM WM350PLTBD.DDDCOR00\nWHERE DDDCR >= 20220101\nAND DDINVT = 'F'\nAND DDSDIM <> '   '"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[DDDCOR00]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "DDDCOR00"
								}
							}
						]
					},
					{
						"name": "WMi_Transfer Load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT *\nFROM WM350PLTCD.C801E0WP\nWHERE W2DCR >= 20220101\nAND W2CASN IS NOT NULL\nAND W2CASN <> ''\nAND W2CASN <> '                    '\nAND W2STAT <> '99'"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[C801E0WP2]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP2"
								}
							}
						]
					},
					{
						"name": "WMIi_Transfer Seals",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyDimensions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": "SELECT W2SHMT\n\t  ,W2SEA1\n\t  ,W2SEA2\n\t  ,W2SEA3\n\t  ,W2SEA4\n\t  ,W2SEA5\nFROM WM350PLTCD.C801E0WP\nWHERE W2DLM >= 20220101\nAND W2CASN = '                    '"
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": "TRUNCATE TABLE [Tabular_Plants].[C801E0WP]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP"
								}
							}
						]
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "SetStart",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "StartTime",
							"value": {
								"value": "@activity('StartTime').output.firstRow.TimeNow",
								"type": "Expression"
							}
						}
					},
					{
						"name": "NightlyDimensions",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WMi_Styles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.powerbi.com/v1.0/myorg/groups/516449d1-03ba-45f4-9500-c94aee0d3912/datasets/6181c309-ac65-4198-b329-3892202ae9fe/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 10,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Style\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "NightlyFacts",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WMi_Case Inventory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Country Origin",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMIi_Transfer Seals",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Transfer Load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Work Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.powerbi.com/v1.0/myorg/groups/516449d1-03ba-45f4-9500-c94aee0d3912/datasets/6181c309-ac65-4198-b329-3892202ae9fe/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 10,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Country Of Origin\"\n        },\n        {\n            \"table\": \"Case Inventory\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "InsertQueue",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "NightlyFacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT [EventType]\n\t  ,[ModelName]\n\t  ,[EventName]\n\t  ,[RefreshId]\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''CreateDateTime''\n\t  ,[EventStatus]\n\t  ,[ProcessEnd]\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''\nFROM \n(\nVALUES (''PBI Refresh'',''Plants'',''Nightly_Begin'',NULL,''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''') \n\t  ,(''PBI Refresh'',''Plants'',''Nightly_Dimensions'',''15037fbd-2574-4243-807e-5e526b980169'',''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''') \n\t  ,(''PBI Refresh'',''Plants'',''Nightly_Facts'',''cd7bc036-2814-4ded-a049-94fdde2fe347'',''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''')\n\t  ,(''PBI Refresh'',''Plants'',''Nightly_End'',NULL,''C'',''',convertFromUtc(utcnow(),'Eastern Standard Time'),''') \n) AS PR (EventType,ModelName,EventName,RefreshId,EventStatus,ProcessEnd)')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					},
					{
						"name": "SendCompletionEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "InsertQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\"ModelName\" : \"','Plants PBI','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DimensionsTime": {
						"type": "String"
					},
					"FactsTime": {
						"type": "String"
					},
					"EndTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Plants"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WMi_Plants_Hourly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WMi_Case Inventory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT IDCASN\n\t  ,IDSEA\n\t  ,IDSTYL\n\t  ,IDCOLR\n\t  ,IDSDIM\n\t  ,IDSZCD\n\t  ,IDSZPO\n\t  ,IDINVT\n\t  ,IDBCHN\n\t  ,IDSZDS\n\t  ,IDQTY\n\t  ,IDSQTY\n\t  ,IDWKON\n\t  ,IDSHMT\n\t  ,IDPON\n\t  ,IDTRLN\n\t  ,IDSTAT\n\t  ,IDWHSE\n\t  ,IDAREA\n\t  ,IDZONE\n\t  ,IDAISL\n\t  ,IDBAY\n\t  ,IDLEVL\n\t  ,IDPOSN\n\t  ,IDPAID\n\t  ,IDPXR3\n\t  ,IDDCR\n\t  ,IDTCR\n\t  ,IDUSER\nFROM WM350PLTBD.IDCASE00\nWHERE IDDCR >= ',activity('ProcessDate').output.firstRow.StartDate)",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[IDCASE00]\nWHERE [IDDCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "IDCASE00"
								}
							}
						]
					},
					{
						"name": "WMi_Country Origin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT PRORDER\n\t  ,PRADJORG\n\t  ,PRPLTCTY\n\t  ,PRDTCR\n\t  ,PRTMCR\nFROM WM350PLTCD.PRPROD00\nWHERE PRDTCR >= ',activity('ProcessDate').output.firstRow.StartDate)",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[PRPROD00]\nWHERE [PRDTCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "PRPROD00"
								}
							}
						]
					},
					{
						"name": "WMi_Work Order",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT DDWHSE\n\t  ,DDWKON\n\t  ,DDSEA\n\t  ,DDSTYL\n\t  ,DDCOLR\n\t  ,DDSDIM\n\t  ,DDSZCD\n\t  ,DDSZPO\n\t  ,DDSZDS\n\t  ,DDINVT\n\t  ,DDBORQ\n\t  ,DDDCR\nFROM WM350PLTBD.DDDCOR00\nWHERE DDDCR >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND DDINVT = ''F''\nAND DDSDIM <> ''   ''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[DDDCOR00]\nWHERE [DDDCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "DDDCOR00"
								}
							}
						]
					},
					{
						"name": "WMi_Transfer Load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT *\nFROM WM350PLTCD.C801E0WP\nWHERE W2DCR >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND W2CASN IS NOT NULL\nAND W2CASN <> ''''\nAND W2CASN <> ''                    ''\nAND W2STAT <> ''99''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[C801E0WP2]\nWHERE [W2DCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP2"
								}
							}
						]
					},
					{
						"name": "WMIi_Transfer Seals",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT W2SHMT\n\t  ,W2SEA1\n\t  ,W2SEA2\n\t  ,W2SEA3\n\t  ,W2SEA4\n\t  ,W2SEA5\nFROM WM350PLTCD.C801E0WP\nWHERE W2DLM >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND W2CASN = ''                    ''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[C801E0WP]\nWHERE [W2DLM] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP"
								}
							}
						]
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "RefreshFacts",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WMi_Case Inventory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Country Origin",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMIi_Transfer Seals",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Transfer Load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Work Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.powerbi.com/v1.0/myorg/groups/516449d1-03ba-45f4-9500-c94aee0d3912/datasets/6181c309-ac65-4198-b329-3892202ae9fe/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 10,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Country Of Origin\"\n        },\n        {\n            \"table\": \"Case Inventory\"\n        },\n        {\n            \"table\": \"Transfer Load\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "InsertQueue",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "RefreshFacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ''PBI Refresh'' AS ''EventType''\n\t  ,''Plants'' AS ''ModelName''\n\t  ,''Hourly'' AS ''EventName''\n\t  ,''3167dd37-7c14-4c39-af0d-ae13c90c727e'' AS ''RefreshId''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''CreateDateTime''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''ProcessStart''\n\t  ,''C'' AS ''EventStatus''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''ProcessEnd''\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					},
					{
						"name": "ProcessDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(CONVERT(varchar(8),GETDATE()-40 AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' ,112) AS int) AS 'StartDate'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DimensionsTime": {
						"type": "String"
					},
					"FactsTime": {
						"type": "String"
					},
					"EndTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Plants"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WMi_Plants_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WMi_Case Inventory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT IDCASN\n\t  ,IDSEA\n\t  ,IDSTYL\n\t  ,IDCOLR\n\t  ,IDSDIM\n\t  ,IDSZCD\n\t  ,IDSZPO\n\t  ,IDINVT\n\t  ,IDBCHN\n\t  ,IDSZDS\n\t  ,IDQTY\n\t  ,IDSQTY\n\t  ,IDWKON\n\t  ,IDSHMT\n\t  ,IDPON\n\t  ,IDTRLN\n\t  ,IDSTAT\n\t  ,IDWHSE\n\t  ,IDAREA\n\t  ,IDZONE\n\t  ,IDAISL\n\t  ,IDBAY\n\t  ,IDLEVL\n\t  ,IDPOSN\n\t  ,IDPAID\n\t  ,IDPXR3\n\t  ,IDDCR\n\t  ,IDTCR\n\t  ,IDUSER\nFROM WM350PLTBD.IDCASE00\nWHERE IDDCR >= ',activity('ProcessDate').output.firstRow.StartDate)",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[IDCASE00]\nWHERE [IDDCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "IDCASE00"
								}
							}
						]
					},
					{
						"name": "WMi_Country Origin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT PRORDER\n\t  ,PRADJORG\n\t  ,PRPLTCTY\n\t  ,PRDTCR\n\t  ,PRTMCR\nFROM WM350PLTCD.PRPROD00\nWHERE PRDTCR >= ',activity('ProcessDate').output.firstRow.StartDate)",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[PRPROD00]\nWHERE [PRDTCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "PRPROD00"
								}
							}
						]
					},
					{
						"name": "WMi_Work Order",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT DDWHSE\n\t  ,DDWKON\n\t  ,DDSEA\n\t  ,DDSTYL\n\t  ,DDCOLR\n\t  ,DDSDIM\n\t  ,DDSZCD\n\t  ,DDSZPO\n\t  ,DDSZDS\n\t  ,DDINVT\n\t  ,DDBORQ\n\t  ,DDDCR\nFROM WM350PLTBD.DDDCOR00\nWHERE DDDCR >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND DDINVT = ''F''\nAND DDSDIM <> ''   ''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[DDDCOR00]\nWHERE [DDDCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "DDDCOR00"
								}
							}
						]
					},
					{
						"name": "WMi_Transfer Load",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT *\nFROM WM350PLTCD.C801E0WP\nWHERE W2DCR >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND W2CASN IS NOT NULL\nAND W2CASN <> ''''\nAND W2CASN <> ''                    ''\nAND W2STAT <> ''99''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[C801E0WP2]\nWHERE [W2DCR] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP2"
								}
							}
						]
					},
					{
						"name": "WMIi_Transfer Seals",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ProcessDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "Db2Source",
								"query": {
									"value": "@concat('SELECT W2SHMT\n\t  ,W2SEA1\n\t  ,W2SEA2\n\t  ,W2SEA3\n\t  ,W2SEA4\n\t  ,W2SEA5\nFROM WM350PLTCD.C801E0WP\nWHERE W2DLM >= ',activity('ProcessDate').output.firstRow.StartDate,'\nAND W2CASN = ''                    ''')",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"preCopyScript": {
									"value": "@{concat('DELETE FROM [Tabular_Plants].[C801E0WP]\nWHERE [W2DLM] >= ',activity('ProcessDate').output.firstRow.StartDate)}",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WMIPROD",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Veniam",
									"Table": "Minim"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "PNETSQL",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Tabular_Plants",
									"Table": "C801E0WP"
								}
							}
						]
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "RefreshFacts",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "WMi_Case Inventory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Country Origin",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMIi_Transfer Seals",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Transfer Load",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "WMi_Work Order",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:15:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://api.powerbi.com/v1.0/myorg/groups/516449d1-03ba-45f4-9500-c94aee0d3912/datasets/6181c309-ac65-4198-b329-3892202ae9fe/refreshes",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 10,\n    \"RetryCount\": 0,\n    \"Objects\": [\n        {\n            \"table\": \"Country Of Origin\"\n        },\n        {\n            \"table\": \"Case Inventory\"\n        },\n        {\n            \"table\": \"Transfer Load\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://analysis.windows.net/powerbi/api"
							}
						}
					},
					{
						"name": "InsertQueue",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "RefreshFacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ''PBI Refresh'' AS ''EventType''\n\t  ,''Plants'' AS ''ModelName''\n\t  ,''20Min_Process'' AS ''EventName''\n\t  ,''3167dd37-7c14-4c39-af0d-ae13c90c727e'' AS ''RefreshId''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''CreateDateTime''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.startTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''ProcessStart''\n\t  ,''C'' AS ''EventStatus''\n\t  ,''',convertFromUtc(formatDateTime(activity('RefreshFacts').output.endTime, 'yyyy-MM-ddTHH:mm:ss.fffffffZ'),'Eastern Standard Time'),''' AS ''ProcessEnd''\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					},
					{
						"name": "ProcessDate",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CAST(CONVERT(varchar(8),GETDATE()-7 AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' ,112) AS int) AS 'StartDate'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DimensionsTime": {
						"type": "String"
					},
					"FactsTime": {
						"type": "String"
					},
					"EndTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Plants"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendCompletionEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "InsertQueuePending",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\"ModelName\" : \"','Plants PBI','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "EmaiDelay",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "PendingModels",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-92.eastus.logic.azure.com:443/workflows/0e1ee5abbe4e49c59cce628f6c6303a7/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=OUK99jqSXOQVlsyyHQoqkiqXuXfedyAGBVSHThDzn7Y",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat('{\n   \"EmailSubject\": \"PowerBI Delay\",\n   \"EmailStatus\": \"Pending\",\n   \"EmailOptions\": \"',activity('PendingModels').output.firstRow.Models,'\"\n }')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "InsertQueuePending",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "EmaiDelay",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ''PBI Refresh'' AS ''EventType''\n\t  ,''Orders'' AS ''ModelName''\n\t  ,''DashboardsPendingEmail'' AS ''EventName''\n\t  ,''C'' AS ''EventStatus''\n\t  ,NULL AS ''RefreshId''\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''CreateDateTime''\n\t  ,''',activity('StartTime').output.firstRow.TimeNow,''' AS ''ProcessStart''\n\t  ,''',convertFromUtc(utcnow(),'Eastern Standard Time'),''' AS ''ProcessEnd''\n\t  ,NULL AS ''RequestID''\n\t  ,''',pipeline().RunId,''' AS ''PipelineRunID''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Controls",
									"Table": "ADFRefreshQueue"
								}
							}
						]
					},
					{
						"name": "PendingModels",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "StartTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT COALESCE(SUBSTRING(\n        (\n           SELECT DISTINCT ', ' + [M1].[ModelName]\n\t\t\tFROM\n\t\t\t\t(\n\t\t\t\t\tVALUES \n\t\t\t\t\t ('Orders',1)\n\t\t\t\t\t,('Supply',2)\n\t\t\t\t\t,('MasterData',4)\n\t\t\t\t\t,('Warehouse',3)\n\t\t\t\t) AS M1(ModelName, PriorityNumber)\n\t\t\tLEFT JOIN [AZUREDB].[DB01].[Controls].[ADFRefreshQueue] EQ ON [EQ].[ModelName] = [M1].[ModelName] AND [EQ].[EventName] = 'Nightly_End'\n\t\t\tAND CAST([EQ].[CreateDateTime] AS date) = (SELECT [ActualDate] FROM [Dimensions].[Days] WHERE [CurrentDayOffset] = 0)\n\t\t\tAND [EQ].[EventName] = 'Nightly_End'\n\t\t\tAND [EQ].[EventStatus] = 'C'\n\t\t\tAND [EQ].[ModelName] IN ('Orders','Supply','MasterData','Warehouse')\n\t\t\tWHERE [EQ].[ModelName] IS NULL\n            FOR XML PATH (''), TYPE\n        ).value('text()[1]','nvarchar(max)'), 2, 1000),'') AS 'Models'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "PNET_ReadOnly",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Dapibus",
									"Table": "Faucibus"
								}
							}
						}
					},
					{
						"name": "StartTime",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Eastern Standard Time' AS 'TimeNow'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2300HoursNightly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CanvasNightlyRun",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-05-23T22:14:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								23
							],
							"weekDays": [
								"Sunday",
								"Monday",
								"Tuesday",
								"Wednesday",
								"Thursday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6AM_Datasets')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "MasterData_Full",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-01T00:00:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CanvasPBI_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ReadQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ReadQueue').output.firstRow.Idle,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessCanvas_RunningPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CanvasPBI_Running",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ReadQueue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Canvas'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND ([EventStatus] = 'R' OR [EventStatus] IS NULL)\n)\nTHEN 0\nELSE 1 END AS 'Idle'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Canvas"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersPBI_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ReadQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ReadQueue').output.firstRow.Idle,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessOrders_RunningPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "OrdersPBI_Running",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ReadQueue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Orders'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND ([EventStatus] = 'R' OR [EventStatus] IS NULL)\n)\nTHEN 0\nELSE 1 END AS 'Idle'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Orders_PBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/OrdersPBI_Running')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOrders_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ReadQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ReadQueue').output.firstRow.Idle,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessOrders_Running",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessOrders_Running",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ReadQueue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[AzureEventQueue]\n\tWHERE [EventType] = 'SSAS Refresh'\n\t  AND ([EventStatus] = 'R' OR [EventStatus] IS NULL)\n)\nTHEN 0\nELSE 1 END AS 'Idle'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Orders"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ProcessOrders_Running')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ReadQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ReadQueue').output.firstRow.Idle,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessSupply_Running",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "ProcessSupply_Running",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ReadQueue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[AzureSharedEventQueue]\n\tWHERE [EventType] = 'Supply' AND ([EventStatus] = 'R' OR [EventStatus] IS NULL)\n)\nTHEN 0\nELSE 1 END AS 'Idle'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Supply"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ProcessSupply_Running')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SupplyPBI_Queue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ReadQueue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('ReadQueue').output.firstRow.Idle,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "ProcessSupply_RunningPBI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SupplyPBI_Running",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "ReadQueue",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT CASE WHEN EXISTS (\n\tSELECT * FROM [Controls].[ADFRefreshQueue]\n\tWHERE [ModelName] = 'Supply'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND ([EventStatus] = 'R' OR [EventStatus] IS NULL)\n)\nTHEN 0\nELSE 1 END AS 'Idle'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Supply_PBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SupplyPBI_Running')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse_Refresh')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "ReadRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('ReadRefresh').output.firstRow.EventName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Nightly_Begin",
									"activities": [
										{
											"name": "SetNoRefresh_01",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Nightly_End",
									"activities": [
										{
											"name": "SetNoRefresh_02",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										},
										{
											"name": "SendCompletionEmail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "SetNoRefresh_02",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-13.northcentralus.logic.azure.com:443/workflows/edec3768a21d4a618a89c7ccf8c4ad0b/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=Om-PN4tQZfPmI_KeEBQTkW7qGjSwrgbMrvF8RSqCfQ8",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"ModelName\" : \"','PBI Warehouse','\" , \"StartDateTime\" : \"',utcnow(),'\"}')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "Nightly_Dimensions",
									"activities": [
										{
											"name": "Set_Tables_04",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_04",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Warehouse''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_04",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Nightly_Facts",
									"activities": [
										{
											"name": "Set_Tables_05",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Nightly_Facts",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Nightly_Facts').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Tables_Nightly_Facts",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag05",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Warehouse''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetRefreshFlag05",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "Facts_Partitions",
									"activities": [
										{
											"name": "Set_Tables_06",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Tables_Facts_Partition",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('Tables_Facts_Partition').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "SetRefreshFlag06",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										},
										{
											"name": "Tables_Facts_Partition",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetRefreshFlag06",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Warehouse''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										}
									]
								},
								{
									"value": "Hourly",
									"activities": [
										{
											"name": "Set_Tables_Hourly",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefreshQueue_Hourly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefreshQueue_Hourly').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefreshQueue_Hourly",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_Hourly",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Supply''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_Hourly",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								},
								{
									"value": "UpdateSP",
									"activities": [
										{
											"name": "Update Drop Units",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "SetCompleteHold",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Tabular_Warehouse].[RollingUnitsNotWaved]",
												"storedProcedureParameters": {
													"option": {
														"value": "L3D",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "DBNSQLPNET",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "UpdateSLA",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Update Drop Units",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "SLACalculation",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "SetCompleteHold",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"pipelineRunId": {
														"value": {
															"value": "@string(pipeline().RunId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"requestId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": "Flag Event",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "BIP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "Insert Nightly Events",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "UpdateSLA",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "WarehouseNightlyRun",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {}
											}
										},
										{
											"name": "SetNoRefresh_SLA",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Insert Nightly Events",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "0"
											}
										}
									]
								},
								{
									"value": "Dates_Dimensions",
									"activities": [
										{
											"name": "Set_Table_DatesDimensions",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "TableRefresh_DatesDimensions",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "RefreshParameters",
												"value": {
													"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 6,\n    \"RetryCount\": 0,\n    \"Objects\": ',activity('TableRefresh_DatesDimensions').output.firstRow.Refresh,'\n}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TableRefresh_DatesDimensions",
											"type": "Lookup",
											"dependsOn": [
												{
													"activity": "SetForRefresh_DatesDimensions",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT CAST(\n(\n\tSELECT TRIM([Tablename]) AS ''table''\n\tFROM [Controls].[ADFEventRefreshCatalog]\n\t\tWHERE [EventName] = ''',activity('ReadRefresh').output.firstRow.EventName,'''\n\t\tAND [ModelName] = ''Warehouse''\n\t\tAND [ValidFlag] = ''Y''\n\tFOR JSON AUTO\n) AS varchar(MAX)) AS ''Refresh''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											}
										},
										{
											"name": "SetForRefresh_DatesDimensions",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "ProcessingConditional",
												"value": "1"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "UpdateQueue_UnknowEvent",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": null,
												"type": "DateTime"
											},
											"status": {
												"value": "F",
												"type": "String"
											},
											"statusMessage": {
												"value": "ERROR: Unknown Event Name",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ReadRefresh",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[EventName] FROM [Controls].[ADFRefreshQueue]\nWHERE [ModelName] = 'Warehouse'\n\t  AND [EventType] = 'PBI Refresh'\n\t  AND [EventStatus] IS NULL\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Switch1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(int(variables('ProcessingConditional')),1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "UpdateFlagQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": null,
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(pipeline().TriggerTime,'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "C",
												"type": "String"
											},
											"statusMessage": {
												"value": "Flag Event",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "RefreshWarehousePBI",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "00:00:25",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1e04c36c-aa71-43a4-bd7b-843e24169196/refreshes",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "@variables('RefreshParameters')",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "GetRefresh",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "RefreshWarehousePBI",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://api.powerbi.com/v1.0/myorg/groups/7f9759c8-270b-4e68-a251-7fb844a51e9b/datasets/1e04c36c-aa71-43a4-bd7b-843e24169196/refreshes?$top=2",
										"method": "GET",
										"headers": {},
										"authentication": {
											"type": "MSI",
											"resource": "https://analysis.windows.net/powerbi/api"
										}
									}
								},
								{
									"name": "FormatResponse",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "GetRefresh",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "Response",
										"value": {
											"value": "@array(first(activity('GetRefresh').output.value))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "UpdateQueue",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "FormatResponse",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[Controls].[UpdateADFQueueRefresh]",
										"storedProcedureParameters": {
											"endTime": {
												"value": null,
												"type": "DateTime"
											},
											"eventId": {
												"value": {
													"value": "@int(activity('ReadRefresh').output.firstRow.EventId)",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"pipelineRunId": {
												"value": {
													"value": "@string(pipeline().RunId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"requestId": {
												"value": {
													"value": "@string(variables('Response')[0].requestId)",
													"type": "Expression"
												},
												"type": "String"
											},
											"startTime": {
												"value": {
													"value": "@convertFromUtc(utcnow(),'Eastern Standard Time')",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"status": {
												"value": "R",
												"type": "String"
											},
											"statusMessage": {
												"value": "Just Started",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "BIP01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"RefreshParameters": {
						"type": "String"
					},
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"ProcessingConditional": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Warehouse_PBI"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SLACalculation')]"
			]
		}
	]
}