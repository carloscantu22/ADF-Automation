{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"BIP01": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ProcessSupply_UpdateQueue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetRefresh",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetRefreshId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://northcentralus.asazure.windows.net/servers/carharttbiasp01/models/Supply/refreshes/',string(activity('GetRefreshId').output.firstRow.RefreshId))",
								"type": "Expression"
							},
							"method": "GET",
							"body": {
								"value": "@concat('{\n    \"Type\": \"Full\",\n    \"CommitMode\": \"transactional\",\n    \"MaxParallelism\": 2,\n    \"RetryCount\": 2,\n    \"Objects\": [\n        {\n            \"table\": \"Production Plans\",\n            \"partition\": \"DimCustomer\"\n        },\n        {\n            \"table\": \"Dates\"\n        }\n    ]\n}')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net  "
							}
						}
					},
					{
						"name": "GetRefreshId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [EventId],[RefreshId],[EventName] FROM [Controls].[AzureSharedEventQueue]\nWHERE [EventType] = 'Supply' AND [EventStatus] = 'R'\nORDER BY [EventId]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSQLQueue",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "Lorem",
									"Table": "Ipsum"
								}
							}
						}
					},
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "GetRefresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@activity('GetRefresh').output.status",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "succeeded",
									"activities": [
										{
											"name": "UpdateQueue_Succeed",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "C",
														"type": "String"
													},
													"statusMessage": {
														"value": null,
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "[parameters('BIP01')]",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "cancelled",
									"activities": [
										{
											"name": "UpdateQueue_Cancelled",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.endTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "F",
														"type": "String"
													},
													"statusMessage": {
														"value": "Cancelled due to request by user.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "[parameters('BIP01')]",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "failed",
									"activities": [
										{
											"name": "UpdateQueue_Fail",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": null,
														"type": "String"
													},
													"startTime": {
														"value": null,
														"type": "DateTime"
													},
													"status": {
														"value": null,
														"type": "String"
													},
													"statusMessage": {
														"value": "Exception Alerted.",
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "[parameters('BIP01')]",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "SetMessage",
											"type": "SetVariable",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"variableName": "Message",
												"value": {
													"value": "@replace(replace(replace(join(activity('GetRefresh').output.messages, ','), '{\"message\":', ''), '}', ''), '-','')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Insert to Log",
											"type": "Copy",
											"dependsOn": [
												{
													"activity": "SetMessage",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ',string(activity('GetRefreshId').output.firstRow.RefreshId),' AS ''EventId''\n\t  ,''',variables('Message'),''' AS ''EventStatusMessage''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"sink": {
													"type": "AzureSqlSink"
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Lorem",
														"Table": "Ipsum"
													}
												}
											],
											"outputs": [
												{
													"referenceName": "AzureSQLQueue",
													"type": "DatasetReference",
													"parameters": {
														"Schema": "Controls",
														"Table": "AzureSharedEventQueue"
													}
												}
											]
										},
										{
											"name": "SendMail",
											"type": "WebActivity",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"url": "https://prod-05.northcentralus.logic.azure.com:443/workflows/a7ec1a338e8541f092c44178a0d0c201/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=co5WA5F6jucJvp2ui_nfHwjQ6ICRtwQ8NDiUCWi1998",
												"method": "POST",
												"headers": {
													"Content-Type": "application/json"
												},
												"body": {
													"value": "@concat('{\"RefreshId\" : \"',activity('GetRefreshId').output.firstRow.RefreshId,'\" , \"EventName\" : \"',activity('GetRefreshId').output.firstRow.EventName,'\"}')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "TeamsNotification",
											"type": "ExecutePipeline",
											"dependsOn": [
												{
													"activity": "Insert to Log",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "Teams Notification",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"messageCard": {
														"value": "{\n    \"@type\": \"MessageCard\",\n    \"@context\": \"http://schema.org/extensions\",\n    \"themeColor\": \"FF0000\",\n    \"summary\": \"Supply Event Failed\",\n    \"sections\": [\n        {\n            \"activityTitle\": \"Supply Event Failed\",\n            \"facts\": [\n                {\n                    \"name\": \"Event ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventId}\"\n                },\n                {\n                    \"name\": \"Event Name:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.EventName}\"\n                },\n                {\n                    \"name\": \"Refresh ID:\",\n                    \"value\": \"@{activity('GetRefreshId').output.firstRow.RefreshId}\"\n                },\n                {\n                    \"name\": \"Notification time (EST):\",\n                    \"value\": \"@{convertFromUtc(utcnow(),'Eastern Standard Time')}\"\n                }\n            ],\n            \"markdown\": true\n        }\n    ]\n}",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "inProgress",
									"activities": [
										{
											"name": "UpdateQueue_Running",
											"type": "SqlServerStoredProcedure",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"storedProcedureName": "[[Controls].[ADFQueueUpdate]",
												"storedProcedureParameters": {
													"endTime": {
														"value": null,
														"type": "DateTime"
													},
													"eventId": {
														"value": {
															"value": "@int(activity('GetRefreshId').output.firstRow.EventId)",
															"type": "Expression"
														},
														"type": "Int32"
													},
													"refreshId": {
														"value": {
															"value": "@string(activity('GetRefreshId').output.firstRow.RefreshId)",
															"type": "Expression"
														},
														"type": "String"
													},
													"startTime": {
														"value": {
															"value": "@convertFromUtc(formatDateTime(activity('GetRefresh').output.startTime),'Eastern Standard Time')",
															"type": "Expression"
														},
														"type": "DateTime"
													},
													"status": {
														"value": "R",
														"type": "String"
													},
													"statusMessage": {
														"value": {
															"value": "@concat('Running: ',formatDateTime(convertFromUtc(utcnow(),'Eastern Standard Time'),'HH:mm:ss'))",
															"type": "Expression"
														},
														"type": "String"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "[parameters('BIP01')]",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							]
						}
					}
				],
				"variables": {
					"Response": {
						"type": "Array"
					},
					"RefreshId": {
						"type": "String"
					},
					"EventId": {
						"type": "String"
					},
					"Message": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Process Supply"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSQLQueue')]",
				"[concat(variables('factoryId'), '/pipelines/Teams Notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLQueue')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('BIP01')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string",
						"defaultValue": "Lorem"
					},
					"Table": {
						"type": "string",
						"defaultValue": "Ipsum"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Teams Notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Use this pipeline template to send notification on a teams channel. \n\nhttps://adf.azure.com/en-us/monitoring/pipelineruns/f90465ff-b8ea-4f0f-9110-178164bc8ee4?factory=/subscriptions/7b68d2b5-dfbe-46e1-938f-98ed143b7953/resourceGroups/demo101-rg/providers/Microsoft.DataFactory/factories/demofactory101",
				"activities": [
					{
						"name": "Call Teams Webhook",
						"description": "Invokes teams channel's webbook.",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "https://carhartt.webhook.office.com/webhookb2/821a9519-9995-4e07-8f41-359204fb1c05@b4e848aa-20ef-4814-a34a-93fe53f3970f/IncomingWebhook/53212b4e54754a3097bd0b26030417bc/dfb007ca-9396-4a1c-9d58-b1b1499518b9",
								"type": "Expression"
							},
							"method": "POST",
							"body": {
								"value": "@json(pipeline().parameters.messageCard)",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"messageCard": {
						"type": "string"
					}
				},
				"folder": {
					"name": "General"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-01T09:19:35Z"
			},
			"dependsOn": []
		}
	]
}